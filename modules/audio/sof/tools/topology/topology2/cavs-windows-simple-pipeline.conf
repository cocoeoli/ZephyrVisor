<include/common/vendor-token.conf>
<include/common/tokens.conf>
<include/components/host.conf>
<include/components/gain.conf>
<include/components/mixin.conf>
<include/components/mixout.conf>
<include/components/pipeline.conf>
<include/pipelines/cavs/mixin-playback.conf>
<include/pipelines/cavs/mixout-gain-playback.conf>
<include/pipelines/cavs/gain-capture.conf>
<include/controls/mixer.conf>
<include/controls/bytes.conf>
<include/components/copier.conf>
<include/components/virtual.conf>
<include/common/data.conf>
<include/common/pcm.conf>
<include/common/pcm_caps.conf>
<include/common/fe_dai.conf>
<include/dais/hda.conf>
<include/dais/hw_config.conf>
<include/common/manifest.conf>
<include/common/pcm.conf>
<include/common/fe_dai.conf>
<include/common/pcm_caps.conf>
<include/common/route.conf>

# a typical windows playback pipeline
# pipeline 1       --------------- pipeline 2
# copier -> mixin  --------------> mixout -> gain -> copier

Object.Dai {
	HDA.0 {
		name 'Analog Playback and Capture'
		id 4
		index 0
		default_hw_conf_id 4
		Object.Base.hw_config.HDA0 [
		]
		Object.Widget.copier.0 {
			direction playback
			index 1
			dai_index 1
			type dai_in
			dai_type "HDA"
			copier_type "HDA"
			stream_name 'Analog Playback and Capture'
			period_sink_count 0
			period_source_count 2
			format s32le
		}
		Object.Widget.copier.1 {
			direction capture
			index 2
			dai_index 2
			type dai_out
			dai_type "HDA"
                        copier_type "HDA"
			stream_name 'Analog Playback and Capture'
			dai_index 1
			period_sink_count 2
			period_source_count 0
			format s32le
		}
		direction duplex
	}
}

Object.Pipeline {
	mixin-playback.1 {
		Object.Widget.pipeline.1 {
			stream_name 'mixin.playback'
		}
		Object.Widget.copier.1{
			stream_name 'Gain Playback 0'
		}

		Object.Widget.mixin.1{
		}

		format s16le
		index 1
	}

	gain-capture.2 {
		Object.Widget.pipeline.1 {
			stream_name 'copier.HDA.1.capture'
		}
		Object.Widget.copier.1{
			stream_name 'Gain Capture 0'
		}
                Object.Widget.gain.1{
                        Object.Control.mixer.1 {
                                name 'Main gain capture 0'
                        }
                }

		format s16le
		index 2
	}
}

Object.Pipeline {
        mixout-gain-playback.3 {
                Object.Widget.pipeline.1 {
                        stream_name 'copier.HDA.0.playback'
                }
               Object.Widget.mixout.1{
                }

               Object.Widget.gain.1{
                       Object.Control.mixer.1 {
                               name 'Main gain playback 0'
                       }
               }

                format s16le
		index 3
        }
}

Object.PCM {
	pcm.0 {
		name 'HDA Analog'
		id 0
		Object.Base.fe_dai.'HDA Analog' [
		]
		Object.PCM.pcm_caps.playback {
			name 'Gain Playback 0'
			formats 'S32_LE,S16_LE'
		}
		Object.PCM.pcm_caps.capture {
			name 'Gain Capture 0'
			formats 'S32_LE,S16_LE'
		}
		direction duplex
	}
}

Object.Base.route.1 {
	source 'copier.host.1.1'
	sink 'mixin.1.1'
}

Object.Base.route.2 {
        source 'mixin.1.1'
	sink 'mixout.3.1'
}

Object.Base.route.3 {
        source 'mixout.3.1'
	sink 'gain.3.1'
}

Object.Base.route.4 {
        source 'gain.3.1'
        sink 'copier.HDA.1.0'
}

Object.Base.route.5 {
	source 'copier.HDA.2.1'
	sink 'gain.2.1'
}

Object.Base.route.6 {
        source 'gain.2.1'
        sink 'copier.host.2.1'
}

Object.Widget.virtual {
	codec0_in {
		type input
		index 1
	}
	codec1_in {
		type input
		index 2
	}
	codec0_out {
		type output
		index 3
	}
	codec1_out {
		type output
		index 4
	}
	codec2_in {
		type input
		index 5
	}
	codec2_out {
		type output
		index 6
	}
	iDisp1_out {
		type output
		index 7
	}
	iDisp2_out {
		type output
		index 8
	}
	iDisp3_out {
		type output
		index 9
	}
	'iDisp3 Tx' {
		type out_drv
		index 0
	}
	'iDisp2 Tx' {
		type out_drv
		index 1
	}
	'iDisp1 Tx' {
		type out_drv
		index 2
	}
	'Analog CPU Playback' {
		type out_drv
		index 3
	}
	'Digital CPU Playback' {
		type out_drv
		index 4
	}
	'Alt Analog CPU Playback' {
		type out_drv
		index 5
	}
	'Analog CPU Capture' {
		type input
		index 6
	}
	'Digital CPU Capture' {
		type input
		index 7
	}
	'Alt Analog CPU Capture' {
		type input
		index 8
	}
}
